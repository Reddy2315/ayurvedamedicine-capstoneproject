package com.wipro.ayurvedamedicine.controller;

import java.time.LocalDate;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.ayurvedamedicine.dto.CustomerDTO;
import com.wipro.ayurvedamedicine.dto.OrderDTO;
import com.wipro.ayurvedamedicine.entity.Customer;
import com.wipro.ayurvedamedicine.exception.ResourceNotFoundException;
import com.wipro.ayurvedamedicine.service.ICustomerService;
import com.wipro.ayurvedamedicine.service.IOrderService;

import jakarta.validation.Valid;

@CrossOrigin(value = "http://localhost:4200/")
@RestController
@RequestMapping("/orders")
@Validated
public class OrderController {

    @Autowired
    private IOrderService orderService;

    @Autowired
    private ICustomerService customerService;

    @PostMapping
    public ResponseEntity<OrderDTO> addOrder(@RequestBody @Valid OrderDTO orderDTO) throws ResourceNotFoundException {
    	System.out.println("Received Order: " + orderDTO);
    	OrderDTO savedOrder= orderService.saveOrder(orderDTO);
        return new ResponseEntity<>(savedOrder,HttpStatus.CREATED);
    }

    @PutMapping
    public ResponseEntity<OrderDTO> updateOrder(@RequestBody OrderDTO orderDTO) throws ResourceNotFoundException {
        OrderDTO updatedOrderDTO = orderService.updateOrder(orderDTO);
        return new ResponseEntity<>(updatedOrderDTO,HttpStatus.ACCEPTED);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<OrderDTO> viewOrder(@PathVariable Long id) throws ResourceNotFoundException {
        OrderDTO orderDTO = orderService.viewOrder(id);
        return new ResponseEntity<>(orderDTO,HttpStatus.OK);
    }

    @GetMapping
    public ResponseEntity<List<OrderDTO>> getAllOrders() {
        List<OrderDTO> orders = orderService.getAllOrders();
        return new ResponseEntity<>(orders,HttpStatus.OK);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<OrderDTO> cancelOrder(@PathVariable Long id) throws ResourceNotFoundException {
        OrderDTO canceledOrderDTO = orderService.cancelOrder(id);
        return new ResponseEntity<>(canceledOrderDTO,HttpStatus.OK);
    }

    @GetMapping("/medicine/{medicineId}")
    public ResponseEntity<List<OrderDTO>> showAllOrdersByMedicine(@PathVariable Long medicineId) {
        List<OrderDTO> orderDTOs = orderService.showAllOrders(medicineId);
        return new ResponseEntity<>(orderDTOs,HttpStatus.OK);
    }

//    @GetMapping("/customer/{customerId}")
//    public ResponseEntity<List<OrderDTO>> showAllOrdersByCustomer(@PathVariable Long customerId) throws ResourceNotFoundException {
//        CustomerDTO customer = customerService.getCustomerById(customerId);
//        
//        List<OrderDTO> orderDTOs = orderService.showAllOrders(customerId);
//        return new ResponseEntity<>(orderDTOs,HttpStatus.OK);
//    }
// 
    @GetMapping("/customer/{customerId}")
    public ResponseEntity<List<OrderDTO>> showAllOrdersByCustomer(@PathVariable Long customerId) {
        try {
            List<OrderDTO> orderDTOs = orderService.showAllOrdersByCustomer(customerId);
            return new ResponseEntity<>(orderDTOs, HttpStatus.OK);
        } catch (ResourceNotFoundException e) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    

    @GetMapping("/date/{date}")
    public ResponseEntity<List<OrderDTO>> showAllOrdersByDate(@PathVariable LocalDate date) {
        List<OrderDTO> orderDTOs = orderService.showAllOrders(date);
        return new ResponseEntity<>(orderDTOs,HttpStatus.OK);
    }

    @GetMapping("/total-cost/{orderId}")
    public ResponseEntity<Double> calculateTotalCost(@PathVariable Long orderId) throws ResourceNotFoundException {
        double totalCost = orderService.calculateTotalCost(orderId);
        return new ResponseEntity<>(totalCost,HttpStatus.OK);
    }
}
