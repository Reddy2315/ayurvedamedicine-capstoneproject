package com.wipro.ayurvedamedicine.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.wipro.ayurvedamedicine.dto.CustomerDTO;
import com.wipro.ayurvedamedicine.dto.LoginDTO;
import com.wipro.ayurvedamedicine.entity.Customer;
import com.wipro.ayurvedamedicine.exception.InvalidDataException;
import com.wipro.ayurvedamedicine.exception.ResourceAlreadyExistsException;
import com.wipro.ayurvedamedicine.exception.ResourceNotFoundException;
import com.wipro.ayurvedamedicine.service.ICustomerService;

import jakarta.validation.Valid;
@CrossOrigin(value = "http://localhost:4200/")
@RestController
@RequestMapping("/customer")
@Validated
public class CustomerController {

    @Autowired
    private ICustomerService customerService;

    @PostMapping
    public ResponseEntity<CustomerDTO> addCustomer(@RequestBody @Valid CustomerDTO customerDTO) throws ResourceAlreadyExistsException {
        CustomerDTO savedCustomer = customerService.saveCustomer(customerDTO);
        return new ResponseEntity<>(savedCustomer,HttpStatus.CREATED);
    }

    @PostMapping("/login")
	public ResponseEntity<LoginDTO> signIn(@RequestBody CustomerDTO loginDTO) throws ResourceNotFoundException, InvalidDataException {

    	LoginDTO userDTO = customerService.login(loginDTO.getEmail(), loginDTO.getPassword());

		return new ResponseEntity<>(userDTO,HttpStatus.OK);
	}
    
    
    @PutMapping
    public ResponseEntity<CustomerDTO> updateCustomer(@RequestBody CustomerDTO customerDTO) throws ResourceNotFoundException {
        CustomerDTO updatedCustomer = customerService.updateCustomer(customerDTO);
        return new ResponseEntity<>(updatedCustomer, HttpStatus.ACCEPTED);
    }

    @GetMapping("/{id}")
    public ResponseEntity<CustomerDTO> getCustomerById(@PathVariable Long id) throws ResourceNotFoundException {
        CustomerDTO customerDTO = customerService.getCustomerById(id);
        return new ResponseEntity<>(customerDTO, HttpStatus.OK);
    }

    @GetMapping
    public ResponseEntity<List<CustomerDTO>> getAllCustomers() {
        List<CustomerDTO> customerDTOs = customerService.getAllCustomers();
        return new ResponseEntity<>(customerDTOs, HttpStatus.OK);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteCustomer(@PathVariable Long id) throws ResourceNotFoundException {
        Long deletedId=customerService.deleteCustomer(id);
        return new ResponseEntity<>("Customer deleted successfully with id : "+deletedId, HttpStatus.OK);
    }
}
